<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;  
use FOS\OAuthServerBundle\Model\ClientInterface;
use Doctrine\Common\Collections\Criteria;

/**
 * This file has been generated by the Sonata EasyExtends bundle.
 *
 * @link https://sonata-project.org/bundles/easy-extends
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser
{
    /**
     * @var int $id
     */
    protected $id;
    protected $accessTokens;
    protected $refreshTokens;
    protected $authCodes;
	protected $clients;

    /**
     * Get id
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }
	
	
//	
//    /**
//     * Add accessToken
//     *
//     * @param \AppBundle\Entity\Api\AccessToken $accessToken
//     *
//     * @return User
//     */
//    public function addAccessToken(\AppBundle\Entity\Api\AccessToken $accessToken)
//    {
//        $this->accessTokens[] = $accessToken;
//
//        return $this;
//    }
//
//    /**
//     * Remove accessToken
//     *
//     * @param \AppBundle\Entity\Api\AccessToken $accessToken
//     *
//     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
//     */
//    public function removeAccessToken(\AppBundle\Entity\Api\AccessToken $accessToken)
//    {
//        return $this->accessTokens->removeElement($accessToken);
//    }
//
//    /**
//     * Get accessTokens
//     *
//     * @return \Doctrine\Common\Collections\Collection
//     */
//    public function getAccessTokens()
//    {
//        return $this->accessTokens;
//    }
//
//    /**
//     * Add refreshToken
//     *
//     * @param \AppBundle\Entity\Api\RefreshToken $refreshToken
//     *
//     * @return User
//     */
//    public function addRefreshToken(\AppBundle\Entity\Api\RefreshToken $refreshToken)
//    {
//        $this->refreshTokens[] = $refreshToken;
//
//        return $this;
//    }
//
//    /**
//     * Remove refreshToken
//     *
//     * @param \AppBundle\Entity\Api\RefreshToken $refreshToken
//     *
//     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
//     */
//    public function removeRefreshToken(\AppBundle\Entity\Api\RefreshToken $refreshToken)
//    {
//        return $this->refreshTokens->removeElement($refreshToken);
//    }
//
//    /**
//     * Get refreshTokens
//     *
//     * @return \Doctrine\Common\Collections\Collection
//     */
//    public function getRefreshTokens()
//    {
//        return $this->refreshTokens;
//    }

    /**
     * Add accessToken
     *
     * @param \WPA\APIBundle\Entity\AccessToken $accessToken
     *
     * @return User
     */
    public function addAccessToken(\WPA\APIBundle\Entity\AccessToken $accessToken)
    {
        $this->accessTokens[] = $accessToken;

        return $this;
    }

    /**
     * Remove accessToken
     *
     * @param \WPA\APIBundle\Entity\AccessToken $accessToken
     */
    public function removeAccessToken(\WPA\APIBundle\Entity\AccessToken $accessToken)
    {
        $this->accessTokens->removeElement($accessToken);
    }

    /**
     * Get accessTokens
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAccessTokens()
    {
        return $this->accessTokens;
    }

    /**
     * Add refreshToken
     *
     * @param \WPA\APIBundle\Entity\RefreshToken $refreshToken
     *
     * @return User
     */
    public function addRefreshToken(\WPA\APIBundle\Entity\RefreshToken $refreshToken)
    {
        $this->refreshTokens[] = $refreshToken;

        return $this;
    }

    /**
     * Remove refreshToken
     *
     * @param \WPA\APIBundle\Entity\RefreshToken $refreshToken
     */
    public function removeRefreshToken(\WPA\APIBundle\Entity\RefreshToken $refreshToken)
    {
        $this->refreshTokens->removeElement($refreshToken);
    }

    /**
     * Get refreshTokens
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRefreshTokens()
    {
        return $this->refreshTokens;
    }

    /**
     * Add authCode
     *
     * @param \WPA\APIBundle\Entity\AuthCode $authCode
     *
     * @return User
     */
    public function addAuthCode(\WPA\APIBundle\Entity\AuthCode $authCode)
    {
        $this->authCodes[] = $authCode;

        return $this;
    }

    /**
     * Remove authCode
     *
     * @param \WPA\APIBundle\Entity\AuthCode $authCode
     */
    public function removeAuthCode(\WPA\APIBundle\Entity\AuthCode $authCode)
    {
        $this->authCodes->removeElement($authCode);
    }

    /**
     * Get authCodes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAuthCodes()
    {
        return $this->authCodes;
    }

    /**
     * Add client
     *
     * @param \WPA\APIBundle\Entity\Client $client
     *
     * @return User
     */
    public function addClient(\WPA\APIBundle\Entity\Client $client)
    {
        $this->clients[] = $client;

        return $this;
    }

    /**
     * Remove client
     *
     * @param \WPA\APIBundle\Entity\Client $client
     */
    public function removeClient(\WPA\APIBundle\Entity\Client $client)
    {
        $this->clients->removeElement($client);
    }

    /**
     * Get clients
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getClients()
    {
        return $this->clients;
    }
	
	public function isAuthorizedClient(ClientInterface $client)
	{
		$clients = $this->clients;
		
        if($clients) {
            $criteria = Criteria::create()
                        ->where(Criteria::expr()->eq("id", $client->getId()));
            return $clients->matching($criteria)->count();
        }
        
        return false;
	}
}
